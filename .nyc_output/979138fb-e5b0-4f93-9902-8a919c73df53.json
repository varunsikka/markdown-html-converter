{"/Users/varun/personal/markdown-html-converter/src/index.ts":{"path":"/Users/varun/personal/markdown-html-converter/src/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":41}},"2":{"start":{"line":4,"column":25},"end":{"line":4,"column":54}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":153}},"4":{"start":{"line":5,"column":97},"end":{"line":5,"column":147}},"5":{"start":{"line":6,"column":14},"end":{"line":6,"column":44}},"6":{"start":{"line":8,"column":13},"end":{"line":8,"column":71}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":83},"end":{"line":5,"column":84}},"loc":{"start":{"line":5,"column":95},"end":{"line":5,"column":149}},"line":5}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":3,"5":1,"6":1,"7":1},"f":{"0":3},"b":{},"inputSourceMap":{"version":3,"file":"/Users/varun/personal/markdown-html-converter/src/index.ts","sources":["/Users/varun/personal/markdown-html-converter/src/index.ts"],"names":[],"mappings":";;;AAAA,uDAA6D;AAOpD,wGAPA,0CAAuB,OAOA;AANhC,6CAA6C;AAE7C,uBAAuB;AACvB,IAAM,MAAM,GAAG,0CAAuB,CAAC,cAAM,CAAC,CAAC;AAC/C,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC","sourcesContent":["import { markdownToHtmlConverter } from './markdown-to-html';\nimport { input2 } from '../tests/data/index';\n\n// console.log(input1);\nconst result = markdownToHtmlConverter(input2);\nconsole.log(result);\n\nexport { markdownToHtmlConverter };\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b7203767c106d2ad7ded6f7bc606258b4335715b","contentHash":"6a8dd4c4aaad07d3ea1915cf4bc57c0fc440be9e94713c7716fedc6697df5254"},"/Users/varun/personal/markdown-html-converter/src/markdown-to-html/index.ts":{"path":"/Users/varun/personal/markdown-html-converter/src/markdown-to-html/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":103}},"2":{"start":{"line":4,"column":18},"end":{"line":4,"column":40}},"3":{"start":{"line":11,"column":25},"end":{"line":11,"column":30}},"4":{"start":{"line":12,"column":4},"end":{"line":14,"column":7}},"5":{"start":{"line":13,"column":8},"end":{"line":13,"column":79}},"6":{"start":{"line":15,"column":4},"end":{"line":15,"column":26}},"7":{"start":{"line":17,"column":0},"end":{"line":17,"column":52}},"8":{"start":{"line":24,"column":25},"end":{"line":24,"column":30}},"9":{"start":{"line":25,"column":4},"end":{"line":28,"column":7}},"10":{"start":{"line":26,"column":8},"end":{"line":26,"column":79}},"11":{"start":{"line":27,"column":8},"end":{"line":27,"column":30}},"12":{"start":{"line":29,"column":4},"end":{"line":29,"column":48}},"13":{"start":{"line":31,"column":0},"end":{"line":31,"column":52}},"14":{"start":{"line":37,"column":25},"end":{"line":37,"column":44}},"15":{"start":{"line":38,"column":26},"end":{"line":40,"column":6}},"16":{"start":{"line":39,"column":8},"end":{"line":39,"column":43}},"17":{"start":{"line":41,"column":4},"end":{"line":41,"column":40}},"18":{"start":{"line":43,"column":0},"end":{"line":43,"column":58}}},"fnMap":{"0":{"name":"applyInlineMarkdowns","decl":{"start":{"line":10,"column":9},"end":{"line":10,"column":29}},"loc":{"start":{"line":10,"column":37},"end":{"line":16,"column":1}},"line":10},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":49},"end":{"line":12,"column":50}},"loc":{"start":{"line":12,"column":69},"end":{"line":14,"column":5}},"line":12},"2":{"name":"applyScopedMarkdowns","decl":{"start":{"line":23,"column":9},"end":{"line":23,"column":29}},"loc":{"start":{"line":23,"column":37},"end":{"line":30,"column":1}},"line":23},"3":{"name":"(anonymous_3)","decl":{"start":{"line":25,"column":49},"end":{"line":25,"column":50}},"loc":{"start":{"line":25,"column":69},"end":{"line":28,"column":5}},"line":25},"4":{"name":"markdownToHtmlConverter","decl":{"start":{"line":36,"column":9},"end":{"line":36,"column":32}},"loc":{"start":{"line":36,"column":40},"end":{"line":42,"column":1}},"line":36},"5":{"name":"(anonymous_5)","decl":{"start":{"line":38,"column":45},"end":{"line":38,"column":46}},"loc":{"start":{"line":38,"column":62},"end":{"line":40,"column":5}},"line":38}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":20,"4":20,"5":20,"6":20,"7":1,"8":20,"9":20,"10":80,"11":80,"12":20,"13":1,"14":4,"15":4,"16":20,"17":4,"18":1},"f":{"0":20,"1":20,"2":20,"3":80,"4":4,"5":20},"b":{},"inputSourceMap":{"version":3,"file":"/Users/varun/personal/markdown-html-converter/src/markdown-to-html/index.ts","sources":["/Users/varun/personal/markdown-html-converter/src/markdown-to-html/index.ts"],"names":[],"mappings":";;;AAAA,yCAA+D;AAE/D;;;;GAIG;AACH,SAAgB,oBAAoB,CAAC,KAAa;IAChD,IAAI,cAAc,GAAG,KAAK,CAAC;IAC3B,MAAM,CAAC,IAAI,CAAC,2BAAe,CAAC,CAAC,GAAG,CAAC,UAAA,QAAQ;QACvC,cAAc,GAAG,2BAAe,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,OAAO,cAAc,CAAC;AACxB,CAAC;AAPD,oDAOC;AAED;;;;GAIG;AACH,SAAgB,oBAAoB,CAAC,KAAa;IAChD,IAAI,cAAc,GAAG,KAAK,CAAC;IAC3B,MAAM,CAAC,IAAI,CAAC,2BAAe,CAAC,CAAC,GAAG,CAAC,UAAA,QAAQ;QACvC,cAAc,GAAG,2BAAe,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC;QAC3D,OAAO,cAAc,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,OAAO,oBAAoB,CAAC,cAAc,CAAC,CAAC;AAC9C,CAAC;AARD,oDAQC;AAED;;;GAGG;AACH,SAAgB,uBAAuB,CAAC,KAAa;IAEnD,IAAM,cAAc,GAAa,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACrD,IAAM,eAAe,GAAa,cAAc,CAAC,GAAG,CAAC,UAAA,KAAK;QACxD,OAAO,oBAAoB,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC,CAAA;IAEF,OAAO,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACtC,CAAC;AARD,0DAQC","sourcesContent":["import { inlineMarkdowns, scopedMarkdowns } from './markdowns';\n\n/**\n * Applies Inline Markdowns like links\n * @param block string\n * \n */\nexport function applyInlineMarkdowns(block: string): string {\n  let convertedBlock = block;\n  Object.keys(inlineMarkdowns).map(markdown => {\n    convertedBlock = inlineMarkdowns[markdown](convertedBlock);\n  });\n\n  return convertedBlock;\n}\n\n/**\n * Applies Scoped Markdowns like para, heading, subheading etc.\n * @param block string\n * \n */\nexport function applyScopedMarkdowns(block: string): string {\n  let convertedBlock = block;\n  Object.keys(scopedMarkdowns).map(markdown => {\n    convertedBlock = scopedMarkdowns[markdown](convertedBlock);\n    return convertedBlock;\n  });\n\n  return applyInlineMarkdowns(convertedBlock);\n}\n\n/**\n * Primary function for receives a mardown and it converts to html\n * @param input string\n */\nexport function markdownToHtmlConverter(input: string): string {\n\n  const markdownBlocks: string[] = input.split('\\n\\n');\n  const convertedBlocks: string[] = markdownBlocks.map(block => {\n    return applyScopedMarkdowns(block);\n  })\n  \n  return convertedBlocks.join('\\n\\n');\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"796bf5760f0794439726ff2db8ac32c237875a89","contentHash":"b8e3f5dd6a89f0cb0d65189813b9cb55ad7ed9ac5ee715d1c4d1017d069e3372"},"/Users/varun/personal/markdown-html-converter/src/markdown-to-html/markdowns/index.ts":{"path":"/Users/varun/personal/markdown-html-converter/src/markdown-to-html/markdowns/index.ts","statementMap":{"0":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":189}},"2":{"start":{"line":14,"column":16},"end":{"line":14,"column":36}},"3":{"start":{"line":15,"column":4},"end":{"line":15,"column":55}},"4":{"start":{"line":17,"column":0},"end":{"line":17,"column":34}},"5":{"start":{"line":19,"column":16},"end":{"line":19,"column":26}},"6":{"start":{"line":20,"column":21},"end":{"line":20,"column":23}},"7":{"start":{"line":21,"column":28},"end":{"line":21,"column":32}},"8":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"9":{"start":{"line":23,"column":8},"end":{"line":23,"column":56}},"10":{"start":{"line":25,"column":4},"end":{"line":25,"column":47}},"11":{"start":{"line":27,"column":0},"end":{"line":27,"column":38}},"12":{"start":{"line":29,"column":16},"end":{"line":29,"column":29}},"13":{"start":{"line":30,"column":4},"end":{"line":30,"column":47}},"14":{"start":{"line":32,"column":0},"end":{"line":32,"column":44}},"15":{"start":{"line":34,"column":16},"end":{"line":34,"column":29}},"16":{"start":{"line":35,"column":4},"end":{"line":35,"column":47}},"17":{"start":{"line":37,"column":0},"end":{"line":37,"column":40}},"18":{"start":{"line":39,"column":4},"end":{"line":41,"column":5}},"19":{"start":{"line":40,"column":8},"end":{"line":40,"column":18}},"20":{"start":{"line":42,"column":4},"end":{"line":44,"column":5}},"21":{"start":{"line":43,"column":8},"end":{"line":43,"column":21}},"22":{"start":{"line":45,"column":16},"end":{"line":45,"column":23}},"23":{"start":{"line":46,"column":4},"end":{"line":46,"column":45}},"24":{"start":{"line":48,"column":0},"end":{"line":48,"column":54}},"25":{"start":{"line":53,"column":0},"end":{"line":58,"column":2}},"26":{"start":{"line":63,"column":0},"end":{"line":65,"column":2}}},"fnMap":{"0":{"name":"handleLinks","decl":{"start":{"line":13,"column":9},"end":{"line":13,"column":20}},"loc":{"start":{"line":13,"column":28},"end":{"line":16,"column":1}},"line":13},"1":{"name":"handleHeading","decl":{"start":{"line":18,"column":9},"end":{"line":18,"column":22}},"loc":{"start":{"line":18,"column":30},"end":{"line":26,"column":1}},"line":18},"2":{"name":"handleSubheading","decl":{"start":{"line":28,"column":9},"end":{"line":28,"column":25}},"loc":{"start":{"line":28,"column":33},"end":{"line":31,"column":1}},"line":28},"3":{"name":"handleHeading6","decl":{"start":{"line":33,"column":9},"end":{"line":33,"column":23}},"loc":{"start":{"line":33,"column":31},"end":{"line":36,"column":1}},"line":33},"4":{"name":"handleUnformattedText","decl":{"start":{"line":38,"column":9},"end":{"line":38,"column":30}},"loc":{"start":{"line":38,"column":38},"end":{"line":47,"column":1}},"line":38}},"branchMap":{"0":{"loc":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},{"start":{"line":22,"column":4},"end":{"line":24,"column":5}}],"line":22},"1":{"loc":{"start":{"line":22,"column":8},"end":{"line":22,"column":51}},"type":"binary-expr","locations":[{"start":{"line":22,"column":8},"end":{"line":22,"column":25}},{"start":{"line":22,"column":29},"end":{"line":22,"column":51}}],"line":22},"2":{"loc":{"start":{"line":39,"column":4},"end":{"line":41,"column":5}},"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":41,"column":5}},{"start":{"line":39,"column":4},"end":{"line":41,"column":5}}],"line":39},"3":{"loc":{"start":{"line":39,"column":8},"end":{"line":39,"column":48}},"type":"binary-expr","locations":[{"start":{"line":39,"column":8},"end":{"line":39,"column":14}},{"start":{"line":39,"column":18},"end":{"line":39,"column":30}},{"start":{"line":39,"column":34},"end":{"line":39,"column":48}}],"line":39},"4":{"loc":{"start":{"line":42,"column":4},"end":{"line":44,"column":5}},"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":44,"column":5}},{"start":{"line":42,"column":4},"end":{"line":44,"column":5}}],"line":42},"5":{"loc":{"start":{"line":42,"column":8},"end":{"line":42,"column":64}},"type":"binary-expr","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":41}},{"start":{"line":42,"column":45},"end":{"line":42,"column":64}}],"line":42}},"s":{"0":1,"1":1,"2":21,"3":21,"4":1,"5":21,"6":21,"7":21,"8":21,"9":1,"10":21,"11":1,"12":21,"13":21,"14":1,"15":21,"16":21,"17":1,"18":21,"19":0,"20":21,"21":10,"22":11,"23":11,"24":1,"25":1,"26":1},"f":{"0":21,"1":21,"2":21,"3":21,"4":21},"b":{"0":[1,20],"1":[21,6],"2":[0,21],"3":[21,21,21],"4":[10,11],"5":[21,11]},"inputSourceMap":{"version":3,"file":"/Users/varun/personal/markdown-html-converter/src/markdown-to-html/markdowns/index.ts","sources":["/Users/varun/personal/markdown-html-converter/src/markdown-to-html/markdowns/index.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAEF;;;GAGG;AACJ,SAAgB,WAAW,CAAC,KAAa;IACvC,IAAM,KAAK,GAAG,oBAAoB,CAAC;IACnC,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,qBAAqB,CAAC,CAAC;AACrD,CAAC;AAHD,kCAGC;AAED,SAAgB,aAAa,CAAC,KAAa;IACzC,IAAM,KAAK,GAAG,UAAU,CAAC;IACzB,IAAI,UAAU,GAAG,EAAE,CAAC;IACpB,IAAI,iBAAiB,GAAG,IAAI,CAAC;IAC7B,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;QAC/C,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;KACjD;IAED,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;AAC7C,CAAC;AATD,sCASC;AAED,SAAgB,gBAAgB,CAAC,KAAa;IAC5C,IAAM,KAAK,GAAG,aAAa,CAAC;IAC5B,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;AAC7C,CAAC;AAHD,4CAGC;AAED,SAAgB,cAAc,CAAC,KAAa;IAC1C,IAAM,KAAK,GAAG,aAAa,CAAC;IAC5B,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;AAC7C,CAAC;AAHD,wCAGC;AAED,SAAgB,qBAAqB,CAAC,KAAa;IACjD,IAAI,CAAC,KAAK,IAAI,KAAK,KAAK,EAAE,IAAI,KAAK,KAAK,IAAI,EAAE;QAC5C,OAAO,EAAE,CAAC;KACX;IAED,IAAI,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QAC5D,OAAO,KAAK,CAAC;KACd;IAED,IAAM,KAAK,GAAG,OAAO,CAAC;IACtB,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;AAC3C,CAAC;AAXD,sDAWC;AAED;;;GAGG;AACU,QAAA,eAAe,GAAG;IAC7B,aAAa,eAAA;IACb,gBAAgB,kBAAA;IAChB,cAAc,gBAAA;IACd,qBAAqB,uBAAA;CACtB,CAAC;AAEF;;;GAGG;AACU,QAAA,eAAe,GAAG;IAC7B,WAAW,aAAA;CACZ,CAAC","sourcesContent":["/**\n * List of all the Markdowns\n * To add support for more markdowns, add the markdown handler and attach it \n * to either scopedMarkdowns or inlineMarkdowns\n */\n\n /**\n  * \n  * @param input string\n  */\nexport function handleLinks(input: string): string {\n  const regex = /\\[(.*)\\]\\((.*)\\)/gs;\n  return input.replace(regex, '<a href=\"$2\">$1</a>');\n}\n\nexport function handleHeading(input: string): string {\n  const regex = /^#\\s(.*)/;\n  let extraLines = \"\";\n  let extraLinesMatches = null;\n  if (regex.test(input) && input.match(/\\n(.*)/s)) {\n    input = input.replace(/\\n(.*)/s, `\\n<p>$1</p>`);\n  }\n\n  return input.replace(regex, `<h1>$1</h1>`);\n}\n\nexport function handleSubheading(input: string): string {\n  const regex = /^#{2}\\s(.*)/;\n  return input.replace(regex, '<h2>$1</h2>');\n}\n\nexport function handleHeading6(input: string): string {\n  const regex = /^#{6}\\s(.*)/;\n  return input.replace(regex, '<h6>$1</h6>');\n}\n\nexport function handleUnformattedText(input: string): string {\n  if (!input || input === \"\" || input === \"\\n\") {\n    return \"\";\n  }\n\n  if (/^<(.*)>(.*)<(.*)>$/s.test(input) || /^...$/.test(input)) {\n    return input;\n  }\n\n  const regex = /(.*)/s;\n  return input.replace(regex, '<p>$1</p>');\n}\n\n/**\n * Scoped Markdowns\n * Block scope markdowns like heading, subheading etc.\n */\nexport const scopedMarkdowns = {\n  handleHeading,\n  handleSubheading,\n  handleHeading6,\n  handleUnformattedText\n};\n\n/**\n * Inline Markdowns\n * e.g. links, bold, strikethrough\n */\nexport const inlineMarkdowns = {\n  handleLinks,\n};\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3b62fa4d661e02461a79ebcd96859821687dee59","contentHash":"510f975eb6c6dbd911709752e16a956e7697fccd2d89d1abbee70ee81b03e348"}}